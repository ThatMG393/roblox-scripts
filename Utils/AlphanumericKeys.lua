local a = {
    A = Enum.KeyCode.A,
    B = Enum.KeyCode.B,
    C = Enum.KeyCode.C,
    D = Enum.KeyCode.D,
    E = Enum.KeyCode.E,
    F = Enum.KeyCode.F,
    G = Enum.KeyCode.G,
    H = Enum.KeyCode.H,
    I = Enum.KeyCode.I,
    J = Enum.KeyCode.J,
    K = Enum.KeyCode.K,
    L = Enum.KeyCode.L,
    M = Enum.KeyCode.M,
    N = Enum.KeyCode.N,
    O = Enum.KeyCode.O,
    P = Enum.KeyCode.P,
    Q = Enum.KeyCode.Q,
    R = Enum.KeyCode.R,
    S = Enum.KeyCode.S,
    T = Enum.KeyCode.T,
    U = Enum.KeyCode.U,
    V = Enum.KeyCode.V,
    W = Enum.KeyCode.W,
    X = Enum.KeyCode.X,
    Y = Enum.KeyCode.Y,
    Z = Enum.KeyCode.Z,
}
    a["1"] = Enum.KeyCode.One
    a["2"] = Enum.KeyCode.Two
    a["3"] = Enum.KeyCode.Three
    a["4"] = Enum.KeyCode.Four
    a["5"] = Enum.KeyCode.Five
    a["6"] = Enum.KeyCode.Six
    a["7"] = Enum.KeyCode.Seven
    a["8"] = Enum.KeyCode.Eight
    a["9"] = Enum.KeyCode.Nine
    a["0"] = Enum.KeyCode.Zero
    a["/"] = Enum.KeyCode.Slash
    a["."] = Enum.KeyCode.Period
    a["-"] = Enum.KeyCode.Minus
    a["+"] = Enum.KeyCode.Plus
    a["\\"] = Enum.KeyCode.BackSlash
    a["="] = Enum.KeyCode.Equals
    a["<"] = Enum.KeyCode.GreaterThan
    a[">"] = Enum.KeyCode.LessThan
    a[";"] = Enum.KeyCode.Semicolon
return a
